{"version":3,"sources":["../../src/annotation.js"],"names":[],"mappings":"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","file":"annotation.js","sourcesContent":["export class Annotation {\n  constructor(name, targetCls) {\n    this.name = name;\n    this.targetCls = targetCls;\n\n    // We allow the decorators to decorate the targetCls\n    // before we create and configure the module\n    this.applyClassDecorators(targetCls);\n  }\n\n  getInjectionTokens() {\n    const tokens = [];\n    const injections = this.injections;\n    Object.keys(injections).forEach(binding => {\n      tokens.push(injections[binding]);\n    });\n    return tokens;\n  }\n\n  //noinspection InfiniteRecursionJS\n  get injections() {\n    return this.targetCls.injections || {};\n  }\n\n  get decorators() {\n    return this.targetCls.decorators || [];\n  }\n\n  get behaviors() {\n    return this.targetCls.behaviors || [];\n  }\n\n  get dependencies() {\n    return this.targetCls.dependencies || [];\n  }\n\n  /**\n   * This method can be overridden by child classes to\n   * configure the angular module after it is created\n   * @param {module} module The created angular module\n   */\n  configure(/*module*/) {}\n\n  /**\n   * This method applies all the requested injection bindings\n   * from the targetCls to the created instance\n   * @param  {Object} instance The created instance that\n   * wants the bindings\n   * @param  {Array} injected An array with the injected\n   * instances that we will apply on the class instance\n   */\n  applyInjectionBindings(instance, injected) {\n    const injections = this.injections;\n\n    Object.keys(injections).forEach((binding, index) => {\n      Reflect.defineProperty(instance, binding, {value: injected[index]});\n    });\n\n    Reflect.defineProperty(instance, '_annotation', {value: this});\n  }\n\n  /**\n   * This method decorates the created instance with all the\n   * targetCls decorators\n   * @deprecated\n   * @param  {Object} instance The created instance to be decorated\n   */\n  applyDecorators(instance) {\n    const decorators = this.decorators;\n\n    for (const decorator of decorators) {\n      if (decorator.decorate instanceof Function) {\n        decorator.decorate(instance);\n      }\n    }\n  }\n\n  // We apply the behaviors of the class by just referencing the getters\n  applyBehaviors(instance) {\n    this.behaviors.forEach(behavior => instance[behavior]);\n  }\n\n  /**\n   * This method decorates the class with all the targetCls decorators\n   * @deprecated\n   * @param  {Object} targetCls The targetCls to be decorated\n   */\n  applyClassDecorators(targetCls) {\n    const decorators = this.decorators;\n\n    for (const decorator of decorators) {\n      if (decorator.decorateClass instanceof Function) {\n        decorator.decorateClass(targetCls);\n      }\n    }\n  }\n\n  /**\n   * Returns all the angular module names for an array of classes\n   * @param  {Array} classes An array of classes you want to module names for\n   * @return {Array} The name of the angular modules for these classes\n   */\n  static getModuleNames(classes = []) {\n    const names = [];\n\n    for (const cls of classes) {\n      const annotation = cls.annotation;\n      if (annotation) {\n        names.push(annotation.module.name);\n      }\n    }\n\n    return names;\n  }\n\n  static getAnnotationServiceNames(classes = []) {\n    const names = [];\n\n    for (const cls of classes) {\n      const annotation = cls.annotation;\n      if (annotation) {\n        names.push(annotation.serviceName);\n      }\n    }\n\n    return names;\n  }\n}\nexport default Annotation;\n"]}