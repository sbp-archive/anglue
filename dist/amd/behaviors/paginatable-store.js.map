{"version":3,"sources":["../../../src/behaviors/paginatable-store.js"],"names":[],"mappings":"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","file":"paginatable-store.js","sourcesContent":["import angular from 'angular';\nimport {Behavior} from './behavior';\nimport {Handler as handlerDecorator} from '../store';\n\nimport {\n  Transformer,\n  Transformable as transformableDecorator\n} from './transformable';\n\nimport {\n  addBehavior,\n  camelcase\n} from '../utils';\n\nexport class PaginationState {\n  total = 0;\n  constructor(page = 1, limit = null) {\n    this.page = page;\n    this.limit = limit;\n  }\n}\n\nexport class PaginatableStoreBehavior extends Behavior {\n  constructor(instance, {collection, initialPage, initialLimit} = {}) {\n    super(...arguments);\n\n    this.collection = collection || 'items';\n    this.state = new PaginationState(initialPage, initialLimit);\n\n    this.refresh();\n  }\n\n  get transformableCollection() {\n    return this.instance.transformables[this.collection];\n  }\n\n  get transformer() {\n    if (!this._transformer) {\n      const state = this.state;\n      this._transformer = new Transformer('paginatableStore', items => {\n        // We update the total based on the amount of items we get\n        // when this transformer is run. This means that if there is\n        // a filtering transformer before the pagination filter, those\n        // items will not count to the total property.\n        state.total = items.length;\n\n        const limit = state.limit;\n        const start = (state.page - 1) * limit;\n        const end = Math.min(state.total, start + limit);\n\n        return items.slice(start, end);\n      });\n    }\n\n    return this._transformer;\n  }\n\n  refresh() {\n    const collection = this.transformableCollection;\n    const limit = this.state.limit;\n\n    if (collection.transformers.indexOf(this.transformer) >= 0) {\n      if (limit === null) {\n        collection.removeTransformer(this.transformer);\n      } else {\n        collection.refresh();\n      }\n    } else if (limit !== null) {\n      collection.addTransformer(this.transformer);\n    }\n  }\n\n  onPageChange(page) {\n    if (this.state.page !== page) {\n      this.state.page = Math.max(0, page);\n      this.refresh();\n    }\n  }\n\n  onLimitChange(limit) {\n    if (this.state.limit !== limit) {\n      this.state.limit = limit;\n      this.refresh();\n    }\n  }\n}\n\nexport function PaginatableStore(config) {\n  return cls => {\n    let preparedConfig = config;\n    if (angular.isString(config)) {\n      preparedConfig = {entity: config};\n    }\n\n    preparedConfig = Object.assign({\n      collection: 'items',\n      entity: cls.name.replace(/store$/i, '')\n    }, preparedConfig);\n\n    transformableDecorator()(cls.prototype, preparedConfig.collection);\n\n    const pageChangeHandlerName = `on${camelcase(preparedConfig.entity)}PageChange`;\n    const limitChangeHandlerName = `on${camelcase(preparedConfig.entity)}LimitChange`;\n    handlerDecorator(null, false)(cls.prototype, pageChangeHandlerName);\n    handlerDecorator(null, false)(cls.prototype, limitChangeHandlerName);\n\n    addBehavior(cls, PaginatableStoreBehavior, {\n      property: 'paginatableStore',\n      config: preparedConfig,\n      proxy: [\n        `${pageChangeHandlerName}:onPageChange`,\n        `${limitChangeHandlerName}:onLimitChange`,\n        `paginationState:state`\n      ]\n    });\n  };\n}\n"]}