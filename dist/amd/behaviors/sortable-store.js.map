{"version":3,"sources":["../../../src/behaviors/sortable-store.js"],"names":[],"mappings":"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","file":"sortable-store.js","sourcesContent":["import angular from 'angular';\nimport {Behavior} from './behavior';\nimport {Handler as handlerDecorator} from '../store';\n\nimport {\n  Transformer,\n  Transformable as transformableDecorator\n} from './transformable';\n\nimport {\n  addBehavior,\n  camelcase,\n  Inject as injectDecorator\n} from '../utils';\n\nexport class SortableStoreBehavior extends Behavior {\n  constructor(instance, {collection, transformerWeight} = {}) {\n    super(...arguments);\n\n    this.collection = collection || 'items';\n    this.transformerWeight = transformerWeight || 50;\n  }\n\n  get $filter() {\n    return this.instance.$filter;\n  }\n\n  get transformableCollection() {\n    return this.instance.transformables[this.collection];\n  }\n\n  get transformer() {\n    if (!this._transformer) {\n      this._transformer = new Transformer('sortableStore', items => items, this.transformerWeight);\n    }\n    return this._transformer;\n  }\n\n  /**\n   * This is a handler proxy for the Store. It get's called with the payload of\n   * the ENTITY_SORT_CHANGE action.\n   *\n   * @param  {String/Array/Boolean} expression\n   * This can be any valid angular orderBy $filter expression, or a reverse boolean\n   * if the collection we are sorting contains primitives.\n   *\n   *    Valid angular orderBy $filter expressions are\n   *\n   *    - `function`: Getter function. The result of this function will be sorted using the\n   *      `<`, `===`, `>` operator.\n   *    - `string`: An Angular expression. The result of this expression is used to compare elements\n   *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by\n   *      3 first characters of a property called `name`). The result of a constant expression\n   *      is interpreted as a property name to be used in comparisons (for example `\"special name\"`\n   *      to sort object by the value of their `special name` property). An expression can be\n   *      optionally prefixed with `+` or `-` to control ascending or descending sort order\n   *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array\n   *      element itself is used to compare where sorting.\n   *    - `Array`: An array of string predicates. The first predicate in the array\n   *      is used for sorting, but when two items are equivalent, the next predicate is used.\n   */\n  onChangeSort(expression = false) {\n    const collection = this.transformableCollection;\n    const transformer = this.transformer;\n\n    let orderByExpression = expression;\n    if (typeof expression === 'boolean') {\n      orderByExpression = expression ? '-' : '+';\n    }\n\n    transformer.fn = items => {\n      return this.$filter('orderBy')(items, orderByExpression);\n    };\n\n    if (collection.transformers.indexOf(transformer) >= 0) {\n      collection.refresh();\n    } else {\n      collection.addTransformer(transformer);\n    }\n  }\n\n  onClearSort() {\n    this.transformableCollection.removeTransformer(this.transformer);\n  }\n}\n\nexport function SortableStore(config) {\n  return cls => {\n    let preparedConfig = config;\n    if (angular.isString(config)) {\n      preparedConfig = {entity: config};\n    }\n\n    preparedConfig = Object.assign({\n      collection: 'items',\n      entity: cls.name.replace(/store$/i, '')\n    }, preparedConfig);\n    preparedConfig.entity = camelcase(preparedConfig.entity);\n\n    injectDecorator()(cls.prototype, '$filter');\n    transformableDecorator()(cls.prototype, preparedConfig.collection);\n\n    const changeHandlerName = `on${preparedConfig.entity}ChangeSort`;\n    const clearHandlerName = `on${preparedConfig.entity}ClearSort`;\n    handlerDecorator(null, false)(cls.prototype, changeHandlerName);\n    handlerDecorator(null, false)(cls.prototype, clearHandlerName);\n\n    addBehavior(cls, SortableStoreBehavior, {\n      property: 'sortableStore',\n      config: preparedConfig,\n      proxy: [\n        `${changeHandlerName}:onChangeSort`,\n        `${clearHandlerName}:onClearSort`\n      ]\n    });\n  };\n}\n"]}